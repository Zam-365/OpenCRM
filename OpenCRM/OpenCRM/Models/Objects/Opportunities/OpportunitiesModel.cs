using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using OpenCRM.DataBase;
using OpenCRM.Controllers.Session;
using System.Windows.Controls;
using System.Data.SqlClient;
using System.Windows;

namespace OpenCRM.Models.Objects.Oportunities
{
    public class OpportunitiesModel
    {
        #region "Properties"

        #endregion

        #region "Constructors"
        public OpportunitiesModel()
        {

        }

        #endregion

        #region "Methods"

        #region "Opportunities View"

        #region "Loads"
        public void SearchRecentOportunities(DataGrid DataGridRecentOpportunities)
        {
            try
            {
                using (var db = new OpenCRMEntities())
                {
                    var query = (
                        from opportunity in db.Opportunities
                        select new
                        {
                            Id = opportunity.OpportunityId,
                            Opportunity = opportunity.Name,
                            CloseDate = opportunity.CloseDate.Value
                        }
                    ).ToList();

                    DataGridRecentOpportunities.AutoGeneratedColumns += Grid_AutoGeneratedColumns;
                    DataGridRecentOpportunities.ItemsSource = query;
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
        }

        #endregion
        
        #endregion

        #region "Create Opportunity"

        #region "Load"
        public List<Opportunities_Type> getOpportunityType()
        {
            var types = new List<Opportunities_Type>();

            try
            {
                using (var db = new OpenCRMEntities())
                {
                    var query = (
                        from type in db.Opportunities_Type
                        select type
                    ).ToList();

                    types = query;
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }

            return types;
        }

        public List<Lead_Source> getLeadsSource()
        {
            var leadsSource = new List<Lead_Source>();

            try
            {
                using (var db = new OpenCRMEntities())
                {
                    var query = (
                        from leadSource in db.Lead_Source
                        select leadSource
                    ).ToList();

                    leadsSource = query;
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }

            return leadsSource;
        }

        public List<Opportunities_Stage> getOpportunityStages()
        {
            var stages = new List<Opportunities_Stage>();

            try
            {
                using (var db = new OpenCRMEntities())
                {
                    var query = (
                        from stage in db.Opportunities_Stage
                        select stage
                    ).ToList();

                    stages = query;
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }

            return stages;
        }

        public List<Opportunities_Delivery_Status> getOpportunityStatus()
        {
            var status = new List<Opportunities_Delivery_Status>();

            try
            {
                using (var db = new OpenCRMEntities())
                {
                    var query = (
                        from temp in db.Opportunities_Delivery_Status
                        select temp
                    ).ToList();

                    status = query;
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }

            return status;
        }

        #endregion

        #region "Save"
        public void Save(OpportunitiesData OpportunityData)
        {
            try
            {
                using (var db = new OpenCRMEntities())
                {
                    var opportunity = db.Opportunities.Create();

                    opportunity.OpportunityId = db.Opportunities.Count() + 1;
                    opportunity.Name = OpportunityData.Name;

                    //Account
                    opportunity.Account = db.Account.FirstOrDefault(
                        x => x.AccountId == OpportunityData.AccountId
                    );

                    opportunity.Opportunities_Type = db.Opportunities_Type.FirstOrDefault(
                        x => x.OpportunityTypeId == OpportunityData.OpportunityTypeId
                    );

                    opportunity.Lead_Source = db.Lead_Source.FirstOrDefault(
                        x => x.LeadSourceId == OpportunityData.LeadSourceId
                    );
                    
                    opportunity.Amount = OpportunityData.Amount;
                    opportunity.CloseDate = OpportunityData.CloseDate;
                    opportunity.NextStep = OpportunityData.NextStep;

                    opportunity.Opportunities_Stage = db.Opportunities_Stage.FirstOrDefault(
                        x => x.OpportunityStageId == OpportunityData.OpportunityStageId
                    );

                    //Campagin
                    opportunity.Campaign = db.Campaign.FirstOrDefault(
                        x => x.CampaignId == OpportunityData.CampaignPrimarySourceId
                    );

                    opportunity.OrderNumber = OpportunityData.OrderNumber;
                    opportunity.CurrentGenerator = OpportunityData.CurrentGenerator;
                    opportunity.TrackingNumber = OpportunityData.TrackingNumber;

                    //Competidor
                    opportunity.Opportunities_Competidor = db.Opportunities_Competidor.FirstOrDefault(
                        x => x.OpportunityCompetidorId == OpportunityData.OpportunityCompetidorId
                    );

                    opportunity.Opportunities_Delivery_Status = db.Opportunities_Delivery_Status.FirstOrDefault(
                        x => x.OpportunityDeliveryStatusId == OpportunityData.OpportunityDeliveryStatusId
                    );

                    opportunity.Description = OpportunityData.Description;

                    opportunity.CreateDate = OpportunityData.CreateDate;
                    opportunity.UpdateDate = OpportunityData.UpdateDate;

                    //User Owner
                    opportunity.User = db.User.FirstOrDefault(
                        x => x.UserId == OpportunityData.UserId
                    );

                    //User Create By
                    opportunity.User1 = db.User.FirstOrDefault(
                        x => x.UserId == OpportunityData.UserCreateById
                    );

                    //User Update by
                    opportunity.User2 = db.User.FirstOrDefault(
                        x => x.UserId == OpportunityData.UserUpdateById
                    );

                    db.Opportunities.Add(opportunity);
                    db.SaveChanges();

                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
        }

        #endregion

        #region "Search"
        public void SearchAccount(string ToSearch, DataGrid TargetGrid)
        {
            try
            {
                using (var db = new OpenCRMEntities())
                {
                    var query = (
                        from account in db.Account
                        where
                            account.Name.Contains(ToSearch)
                        select new
                        {
                            Id = account.AccountId,
                            Name = account.Name,
                            Site = account.AccountSite,
                            Alias = account.User.UserName,
                            Type = account.Account_Type.Name
                        }
                    ).ToList();

                    TargetGrid.AutoGeneratedColumns += Grid_AutoGeneratedColumns;
                    TargetGrid.ItemsSource = query;
                    TargetGrid.IsReadOnly = true;
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
        }

        public void SearchCampaing(string ToSearch, DataGrid TargetGrid)
        {
            try
            {
                using (var db = new OpenCRMEntities())
                {
                    var query = (
                        from campaign in db.Campaign
                        where
                            campaign.Name.Contains(ToSearch)
                        select new
                        {
                            Id = campaign.CampaignId,
                            Name = campaign.Name,
                            Date = campaign.StartDate + " to " + campaign.EndDate
                        }
                    ).ToList();

                    TargetGrid.AutoGeneratedColumns += Grid_AutoGeneratedColumns;
                    TargetGrid.ItemsSource = query;
                    TargetGrid.IsReadOnly = true;
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
        }

        public void SearchCompetidors(string ToSearch, DataGrid TargetGrid)
        {
            try
            {
                using (var db = new OpenCRMEntities())
                {
                    var query = (
                        from competidor in db.Opportunities_Competidor
                        where
                            competidor.Name.Contains(ToSearch)
                        select new
                        {
                            Id = competidor.OpportunityCompetidorId,
                            Name = competidor.Name
                        }
                    ).ToList();

                    TargetGrid.AutoGeneratedColumns += Grid_AutoGeneratedColumns;
                    TargetGrid.ItemsSource = query;
                    TargetGrid.IsReadOnly = true;
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
        }

        #endregion

        #endregion

        #endregion

        #region "Events"
        void Grid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            var column = (sender as DataGrid).Columns;

            foreach (var item in column)
            {
                if (item.Header.ToString().Equals("Id"))
                    item.Visibility = Visibility.Collapsed;
            }
        }

        #endregion
    }

    public class OpportunitiesData
    {
        #region "Properties"
        public int OpportunityId { get; set; }
        public int UserId { get; set; }
        public string Name { get; set; }
        public int AccountId { get; set; }
        public int OpportunityTypeId { get; set; }
        public int LeadSourceId { get; set; }
        public string Description { get; set; }
        public decimal Amount { get; set; }
        public DateTime CloseDate { get; set; }
        public string NextStep { get; set; }
        public int OpportunityStageId { get; set; }
        public decimal Probability { get; set; }
        public int CampaignPrimarySourceId { get; set; }
        public string OrderNumber { get; set; }
        public string CurrentGenerator { get; set; }
        public string TrackingNumber { get; set; }
        public int OpportunityDeliveryStatusId { get; set; }
        public int OpportunityStatusId { get; set; }
        public int OpportunityCompetidorId { get; set; }
        public int UserCreateById { get; set; }
        public DateTime CreateDate { get; set; }
        public int UserUpdateById { get; set; }
        public DateTime UpdateDate { get; set; }
        public bool Private { get; set; }

        #endregion
    }
}